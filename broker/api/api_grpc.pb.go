// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DagoramaClient is the client API for Dagorama service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DagoramaClient interface {
	CreateWorker(ctx context.Context, in *WorkerConfigurationMessage, opts ...grpc.CallOption) (*WorkerMessage, error)
	CreateInstance(ctx context.Context, in *InstanceConfigurationMessage, opts ...grpc.CallOption) (*InstanceMessage, error)
	CreateNode(ctx context.Context, in *NodeConfigurationMessage, opts ...grpc.CallOption) (*NodeMessage, error)
	Ping(ctx context.Context, in *WorkerMessage, opts ...grpc.CallOption) (*PongMessage, error)
	GetWork(ctx context.Context, in *WorkerMessage, opts ...grpc.CallOption) (*NodeMessage, error)
	SubmitWork(ctx context.Context, in *WorkCompleteMessage, opts ...grpc.CallOption) (*NodeMessage, error)
}

type dagoramaClient struct {
	cc grpc.ClientConnInterface
}

func NewDagoramaClient(cc grpc.ClientConnInterface) DagoramaClient {
	return &dagoramaClient{cc}
}

func (c *dagoramaClient) CreateWorker(ctx context.Context, in *WorkerConfigurationMessage, opts ...grpc.CallOption) (*WorkerMessage, error) {
	out := new(WorkerMessage)
	err := c.cc.Invoke(ctx, "/main.Dagorama/CreateWorker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dagoramaClient) CreateInstance(ctx context.Context, in *InstanceConfigurationMessage, opts ...grpc.CallOption) (*InstanceMessage, error) {
	out := new(InstanceMessage)
	err := c.cc.Invoke(ctx, "/main.Dagorama/CreateInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dagoramaClient) CreateNode(ctx context.Context, in *NodeConfigurationMessage, opts ...grpc.CallOption) (*NodeMessage, error) {
	out := new(NodeMessage)
	err := c.cc.Invoke(ctx, "/main.Dagorama/CreateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dagoramaClient) Ping(ctx context.Context, in *WorkerMessage, opts ...grpc.CallOption) (*PongMessage, error) {
	out := new(PongMessage)
	err := c.cc.Invoke(ctx, "/main.Dagorama/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dagoramaClient) GetWork(ctx context.Context, in *WorkerMessage, opts ...grpc.CallOption) (*NodeMessage, error) {
	out := new(NodeMessage)
	err := c.cc.Invoke(ctx, "/main.Dagorama/GetWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dagoramaClient) SubmitWork(ctx context.Context, in *WorkCompleteMessage, opts ...grpc.CallOption) (*NodeMessage, error) {
	out := new(NodeMessage)
	err := c.cc.Invoke(ctx, "/main.Dagorama/SubmitWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DagoramaServer is the server API for Dagorama service.
// All implementations must embed UnimplementedDagoramaServer
// for forward compatibility
type DagoramaServer interface {
	CreateWorker(context.Context, *WorkerConfigurationMessage) (*WorkerMessage, error)
	CreateInstance(context.Context, *InstanceConfigurationMessage) (*InstanceMessage, error)
	CreateNode(context.Context, *NodeConfigurationMessage) (*NodeMessage, error)
	Ping(context.Context, *WorkerMessage) (*PongMessage, error)
	GetWork(context.Context, *WorkerMessage) (*NodeMessage, error)
	SubmitWork(context.Context, *WorkCompleteMessage) (*NodeMessage, error)
	mustEmbedUnimplementedDagoramaServer()
}

// UnimplementedDagoramaServer must be embedded to have forward compatible implementations.
type UnimplementedDagoramaServer struct {
}

func (UnimplementedDagoramaServer) CreateWorker(context.Context, *WorkerConfigurationMessage) (*WorkerMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorker not implemented")
}
func (UnimplementedDagoramaServer) CreateInstance(context.Context, *InstanceConfigurationMessage) (*InstanceMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstance not implemented")
}
func (UnimplementedDagoramaServer) CreateNode(context.Context, *NodeConfigurationMessage) (*NodeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedDagoramaServer) Ping(context.Context, *WorkerMessage) (*PongMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDagoramaServer) GetWork(context.Context, *WorkerMessage) (*NodeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWork not implemented")
}
func (UnimplementedDagoramaServer) SubmitWork(context.Context, *WorkCompleteMessage) (*NodeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWork not implemented")
}
func (UnimplementedDagoramaServer) mustEmbedUnimplementedDagoramaServer() {}

// UnsafeDagoramaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DagoramaServer will
// result in compilation errors.
type UnsafeDagoramaServer interface {
	mustEmbedUnimplementedDagoramaServer()
}

func RegisterDagoramaServer(s grpc.ServiceRegistrar, srv DagoramaServer) {
	s.RegisterService(&Dagorama_ServiceDesc, srv)
}

func _Dagorama_CreateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerConfigurationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DagoramaServer).CreateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Dagorama/CreateWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DagoramaServer).CreateWorker(ctx, req.(*WorkerConfigurationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dagorama_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceConfigurationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DagoramaServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Dagorama/CreateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DagoramaServer).CreateInstance(ctx, req.(*InstanceConfigurationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dagorama_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeConfigurationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DagoramaServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Dagorama/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DagoramaServer).CreateNode(ctx, req.(*NodeConfigurationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dagorama_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DagoramaServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Dagorama/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DagoramaServer).Ping(ctx, req.(*WorkerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dagorama_GetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DagoramaServer).GetWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Dagorama/GetWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DagoramaServer).GetWork(ctx, req.(*WorkerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dagorama_SubmitWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkCompleteMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DagoramaServer).SubmitWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Dagorama/SubmitWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DagoramaServer).SubmitWork(ctx, req.(*WorkCompleteMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Dagorama_ServiceDesc is the grpc.ServiceDesc for Dagorama service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dagorama_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Dagorama",
	HandlerType: (*DagoramaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorker",
			Handler:    _Dagorama_CreateWorker_Handler,
		},
		{
			MethodName: "CreateInstance",
			Handler:    _Dagorama_CreateInstance_Handler,
		},
		{
			MethodName: "CreateNode",
			Handler:    _Dagorama_CreateNode_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Dagorama_Ping_Handler,
		},
		{
			MethodName: "GetWork",
			Handler:    _Dagorama_GetWork_Handler,
		},
		{
			MethodName: "SubmitWork",
			Handler:    _Dagorama_SubmitWork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
