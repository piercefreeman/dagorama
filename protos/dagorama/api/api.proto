syntax = "proto3";

option go_package = "dagorama/api";

package main;

service Dagorama {
  rpc CreateWorker(WorkerConfigurationMessage) returns (WorkerMessage) {}

  rpc CreateInstance(InstanceConfigurationMessage) returns (InstanceMessage) {}

  rpc CreateNode(NodeConfigurationMessage) returns (NodeMessage) {}

  rpc Ping(WorkerMessage) returns (PongMessage) {}

  rpc GetNode(NodeRetrieveMessage) returns (NodeMessage) {}
  rpc GetWork(WorkerMessage) returns (NodeMessage) {}
  rpc SubmitWork(WorkCompleteMessage) returns (NodeMessage) {}
}

message WorkerConfigurationMessage {
  repeated string excludeQueues = 1;
  repeated string includeQueues = 2;
  repeated string queueTolerations = 3;
}

message WorkerMessage {
  string identifier = 1;
}

message InstanceConfigurationMessage {
  string identifier = 1;
}

message InstanceMessage {
  string identifier = 1;
}

message NodeConfigurationMessage {
  string identifier = 1;
  string functionName = 2;
  string functionHash = 3;
  string queueName = 4;

  bytes arguments = 5;

  repeated string sourceIds = 6;

  string instanceId = 7;
}

message NodeMessage {
  string identifier = 1;
  string functionName = 2;
  string functionHash = 3;
  string queueName = 4;

  bytes arguments = 5;
  bytes resolvedValue = 6;

  repeated NodeMessage sources = 7;

  bool completed = 8;

  string instanceId = 9;
}

message PongMessage {
  int64 lastPing = 2;
}

message WorkCompleteMessage {
  string instanceId = 1;
  string nodeId = 2;
  string workerId = 3;

  bytes result = 4;
}

message NodeRetrieveMessage {
  string instanceId = 1;
  string identifier = 2;
}
